{
  "username": "xcode23",
  "password": "fords",
  "points": 30,
  "problems": [
    {
      "completed": "true",
      "time-completed": "2025-05-09T13:37:00.739Z",
      "value-java": "class Main {\n\tpublic static int countSlips(char[] students, double[] distance) {\n\t\t// Write Java Here\n\t}\n}",
      "testcases": [
        {
          "public": true,
          "input": "students={'W', 'B', 'D', 'D', 'W', 'W', 'S', 'W', 'B', 'W', 'B', 'D', 'D', 'B', 'W'}\ndistance={1.1, 3.4, 0.6, 0.1, 5.2, 2.9, 3.4, 2.1, 1.4, 2.3, 1.4, 2.8, 3.1, 0.4, 0.2}",
          "expected-output": "2\n",
          "your-output": "",
          "status": "cross"
        },
        {
          "public": true,
          "input": "students={'B', 'B', 'W', 'W', 'W', 'W'}\ndistance={2.5, 2.9, 4.5, 5.0, 2.0, 1.0}",
          "expected-output": "2\n",
          "your-output": "",
          "status": "cross"
        },
        {
          "public": false,
          "status": "cross"
        },
        {
          "public": false,
          "status": "cross"
        }
      ]
    },
    {
      "completed": "true",
      "time-completed": "2025-05-09T18:17:20.318Z",
      "value-java": "import java.util.*;\nclass Main{\n\tpublic static int numberOfCitiesHit(char[][] regions, int n){\n\tint startX = -1;\n  int startY = -1;\n  //The outer array is the y coordinate, while the inner is the x coordinate\n  findStart:\n  for(int y = 0; y < n; y++){\n     for(int x = 0; x < n; x++){\n      if(regions[y][x] == 'S'){\n         startX = x;\n         startY = y;\n         break findStart;\n      }\n     }\n  }\n    int[][] directions = {{0,1},{0,-1},{1,0},{-1,0}}; \n    int[][][] parentMap = new int[n][n][2];\n    Queue<int[]> q = new LinkedList<int[]>();\n    ArrayList<int[]> hits = new ArrayList<int[]>();\n    hits.add(new int[]{startX, startY});\n    q.add(new int[]{startX, startY});\n    parentMap[startY][startX] = new int[]{-1, -1};\n    while(!q.isEmpty()){\n      int[] currentCoordinates = q.poll();\n      for(int i = 0; i < 4; i++){\n        int x = currentCoordinates[0] + directions[i][0];\n        int y = currentCoordinates[1] + directions[i][1];\n        int[] vector = {x, y};\n        if(x > -1 && x < n && y > -1 && y < n && regions[y][x] != 'H' && !myContains2(hits, vector)){\n          \n          hits.add(vector);\n          if(regions[y][x] == 'F'){\n            \n            //Do the traceback procedure\n            ArrayList<int[]> path = new ArrayList<int[]>();\n            path.add(vector);\n          \n            while(true){\n              path.add(currentCoordinates);\n              currentCoordinates = parentMap[currentCoordinates[1]][currentCoordinates[0]];\n              if(currentCoordinates[0] == -1){\n                Collections.reverse(path);\n                return path.size();\n              }\n            }\n          }\n          \n          q.add(new int[]{x, y});\n          parentMap[y][x] = currentCoordinates;\n        }\n      }\n    }\n    return -1;\n  }\n\n  public static boolean myContains2(ArrayList<int[]> arr, int[] arr2){\n    for(int i = 0; i < arr.size(); i++){\n      if(arr.get(i)[0] == arr2[0] && arr.get(i)[1] == arr2[1]){\n        return true;\n      }\n    }\n    return false;\n  }\n}",
      "value-python": "def numberOfCitiesHit(regions, n):\n    return 7;",
      "testcases": [
        {
          "public": true,
          "input": "regions={{'S', 'L', 'L', 'L', 'H', 'H', 'H', 'H', 'L', 'H'},{'H', 'H', 'H', 'L', 'L', 'L', 'L', 'L', 'L', 'H'},{'H', 'L', 'L', 'L', 'H', 'H', 'H', 'L', 'H', 'H'},{'H', 'L', 'H', 'L', 'L', 'L', 'H', 'L', 'L', 'H'},{'H', 'H', 'H', 'H', 'H', 'L', 'H', 'H', 'H', 'H'},{'H', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'H'},{'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'L', 'H'},{'H', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'H'},{'H', 'H', 'H', 'L', 'H', 'H', 'H', 'H', 'L', 'H'},{'H', 'L', 'L', 'L', 'L', 'L', 'L', 'F', 'H', 'H'}}\nn=10",
          "expected-output": "27\n",
          "your-output": "27\n",
          "status": "check"
        },
        {
          "public": true,
          "input": "regions={{'S', 'L', 'L', 'H', 'L', 'H', 'L', 'H'}, {'H', 'L', 'L', 'L', 'L', 'L', 'L', 'L'}, {'L', 'L', 'H', 'H', 'L', 'H', 'L', 'L'}, {'L', 'H', 'L', 'L', 'L', 'L', 'H', 'F'}, {'H', 'L', 'L', 'H', 'H', 'L', 'L', 'H'}, {'L', 'L', 'L', 'L', 'L', 'H', 'L', 'L'}, {'H', 'H', 'H', 'L', 'L', 'L', 'L', 'L'}, {'H', 'L', 'H', 'L', 'L', 'L', 'L', 'H'}}\nn=8",
          "expected-output": "11\n",
          "your-output": "11\n",
          "status": "check"
        },
        {
          "public": false,
          "status": "check",
          "your-output": "19\n"
        },
        {
          "public": false,
          "status": "check",
          "your-output": "20\n"
        }
      ]
    }
  ]
}